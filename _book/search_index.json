[
["index.html", "Título aqui Prefácio Para quem é este livro? O que você vai aprender com este livro?", " Título aqui Prefácio lembrar que foi dia 17/09/2017 que eu vi o vídeo que me inspirei. Para quem é este livro? De maneira sucinta este livro é minha humilde tentativa de facilitar o aprendizado e utilização da linguagem R para alunos de graduação em ciências sociais, inevitavelmente, em especial economia. O que você vai aprender com este livro? O que são o R e o RStudio (colocar aqui que não vou ensinar a instalar os programas pois há muito material sobre isso na internet) Mostrar como o R facilita o processo de analise dados em cada um dos processos tradicionais "],
["estruturas-de-dados.html", "1 Estruturas de Dados 1.1 Tipos de dados 1.2 Vetores 1.3 Matrizes", " 1 Estruturas de Dados Neste capítulo vamos apresentar ao leitor os tipos de dados e estruturas de dados fundamentais do R. Nota-se que não são apresentados todos os tipos e estruturas de dados, entretanto garantimos que os aqui apresentados serão o suficiente para resolver quase todos (se não todos) os problemas e aplicações que o leitor se deparar com. Também ressalvamos que talvez esse capítulo seja o mais importante desta parte do livro, pois um bom entendimento sobre os tipos de informações e como elas são armazenadas (dentro do R) é essencial para o desenvolvimento de habilidades para lidar com dados. Sem mais delongas os tipo de dados são como uma determinada informação pode ser registrada e já as estruturas de dados são como as informações são armazenadas de modo que possam ser utilizadas, um pouco abstrata essa explicação até agora não acham? Bem, uma analogia que pode ajudar a compreender a diferença entre tipos de dados e estruturas de dados é a seguinte: Acredito que seja familiar a todos o final do filme Toy Story (o primeiro da trilogia), quando o Woody e o Buzz perdem o caminhão da mudança contratado pela Mãe do Andy (digo mãe e não família pois o Pai do Andy é um mistério). Bem se recordarmos bem alguns brinquedos o Andy trouxe com ele dentro do carro (em especial teria trazido o Woody e o Buzz) e ao mesmo tempo outro brinquedos estavam sendo transportados no caminhão. Onde eu quero chegar com isso? Os brinquedos seriam um tipo de informação (no caso de uma mudança poderíamos pensar que as roupas seriam outro tipo de informação) e o caminhão da transportadora e o carro da mão do Andy seriam as diferentes estruturas nas quais é possível carregar os dados. Com a diferença entre tipos e estruturas de dados explicada vamos agora apresentar ao leitor explicitamente o funcionamento de tais coisas no R. Começamos apresentando os tipos de dados e em seguida as estrutura. 1.1 Tipos de dados Para apresentar os diferentes tipos de como as informações podem ser armazenadas vamos utilizar uma base fictícia de empregados apresentada na tabela 1.1. Nela temos 6 colunas representando diferentes variáveis. Table 1.1: Empregados Nome Idade Setor Peso Nascimento Casado Katrina 30 Financeiro 43.62 1999-08-21 TRUE Ivette 31 Estrutura 44.66 1999-12-18 TRUE Kashaun 32 Marketing 41.39 1999-11-04 FALSE Austin 33 Estrutura 37.66 1999-04-05 FALSE Austin 34 Estrutura 41.99 1999-01-06 FALSE Malik 35 Marketing 46.27 1999-03-31 TRUE Quinn 36 Financeiro 45.52 1999-09-20 FALSE Charles 37 Financeiro 40.96 1999-09-10 TRUE Taylor 38 Marketing 45.10 1999-03-09 TRUE Samantha 39 Marketing 35.44 1999-06-27 FALSE Cada coluna possui um tipo diferente de informação e cada informação é armazenada de um jeito diferente. A lista abaixo sintetiza os tipos de dados e a coluna da tabela com a qual ela está relacionada1. Character (ou string): São caracteres textuais que podem assumir qualquer valor. Na tabela é a coluna relaciona ao Nome; Integer: São números inteiros, neste caso relacionado com a coluna idade; Double: São números decimais, neste caso relacionado à coluna de peso; Factor: São caracteres textuais mais podem assumir somente um determinado tipo de valor. Neste caso seria a coluna que traz o setor no qual o empregado trabalha. Outro exemplo de factor seria o tipo sanguíneo em um banco de dados de pacientes; Dates: São valores textuais que são interpretados como datas, neste caso relacionado à coluna nascimento; Logical: Assumem o valor TRUE ou FALSE, também chamados de valores booleanos. A função str() permite verificar a estrutura dos nossos objetos, o chunk abaixo mostra a utilização da função na nossa base de dados de empregados &gt; str(empregados) # &#39;data.frame&#39;: 10 obs. of 6 variables: # $ Nome : chr &quot;Katrina&quot; &quot;Ivette&quot; &quot;Kashaun&quot; &quot;Austin&quot; ... # $ Idade : int 30 31 32 33 34 35 36 37 38 39 # $ Setor : Factor w/ 3 levels &quot;Estrutura&quot;,&quot;Financeiro&quot;,..: 2 1 3 1 1 3 2 2 3 3 # $ Peso : num 43.6 44.7 41.4 37.7 42 ... # $ Nascimento: Date, format: &quot;1999-08-21&quot; &quot;1999-12-18&quot; ... # $ Casado : logi TRUE TRUE FALSE FALSE FALSE TRUE ... Seguindo na nossa analogia da mudança as estruturas de dados seriam os meios através dos quais podemos transportar os objetos de uma casa para outro, como carros, caminhões etc. Deste modo, nesta seção vamos apresenta ao leitor o que são e exemplos de como construir: (i) Vetores, (ii) Matrizes, (iii) Data frames e (iv) Listas 1.2 Vetores É a estrutura mais básica (e fundamental) do R. De maneira objetiva um vetor é uma sequência de elementos do mesmo tipo. Agora vamos introduzir aqui 4 aspectos importantes sobre vetores. Criando Vetores Há diversas maneiras de se criar vetores e a sua imaginação é de fato o limite, porém há jeitos mais triviais que são muito utilizados. Dois destes triviais são através da função concatenar, c(), e a função sequência, seq(). O chunk abaixo ilustra maneiras diferentes de se criar a sequência 1, 2, 3, 4, 5, 6, 7, 8, 9, 10. &gt; c(1,2,3,4,5,6,7,8,9,10) # [1] 1 2 3 4 5 6 7 8 9 10 &gt; c(1:10) # [1] 1 2 3 4 5 6 7 8 9 10 &gt; seq(from = 1, to = 10, by=1) # [1] 1 2 3 4 5 6 7 8 9 10 &gt; seq(from = 1, length.out = 10,by = 1) # [1] 1 2 3 4 5 6 7 8 9 10 Quando quisermos salvar um determinado vetor em um objeto x, basta utilizarmos o operador de atribuição &lt;- da seguinte maneira x &lt;- c(1:10). A lógica é a mesma para criar vetores com outros tipos de dados, como por exemplo criar um vetor contendo as primeiras letras do alfabeto e outro com os primeiros dias de 2017. &gt; letras &lt;- letters[1:5] &gt; letras # [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &gt; dias &lt;- seq(from = as.Date(&quot;01/01/2017&quot;,format=&quot;%d/%m/%Y&quot;),length.out = 5,by = &quot;day&quot;) &gt; dias # [1] &quot;2017-01-01&quot; &quot;2017-01-02&quot; &quot;2017-01-03&quot; &quot;2017-01-04&quot; &quot;2017-01-05&quot; Não se preocupe caso não tenha ficado claro a sintaxe do vetor dias, mais para frente vamos discutir em maior detalhe datas2 Acessando elementos Acessar elementos específicos de vetores é algo muito útil (acreditem no que eu digo) e fácil, basta utilizar x[i], onde x é um vetor e i o i-ésimo elemento3. No chunk abaixo segue mostro alguns exemplos de como acessar elementos dos vetores &gt; x &lt;- c(1:10) # criando um vetor x &gt; x[7:9] # pegando elementos de 7 a 9 # [1] 7 8 9 &gt; x[length(x)] &lt;- 0 # substituindo o último elemento por 0 Mais adiante no livro4 mostraremos que os filtros utilizados nos dados (como por exemplo selecionar de um banco de dados apenas os pacientes com pressão arterial acima de 140 X 90 mmHg) nada mais é do que acessar elementos do vetores que satisfaçam de terminadas condições. Operações Vetorizadas Dizer que as operações são vetorizadas é apenas dizer que ao aplicar uma funções em um vetor essa função será aplicada em cada um dos elementos do vetor. Daí inclusive a importância de internamente o R não aceitar vetores com tipos de informação diferentes, pois não faria sentido, por exemplo, efetuar a multiplicação em um vetor que contem letras!! A ideia é bastante simples e intuitiva, porém não custa nada visualizar alguns exemplos. &gt; a &lt;- c(1,4,9,16,25,36,49,64,81) &gt; sqrt(a) # sqrt é a raiz quadrada # [1] 1 2 3 4 5 6 7 8 9 &gt; a+1 # [1] 2 5 10 17 26 37 50 65 82 Perceba que cada vez que uma função é aplicada no vetor ela na verdade é aplicada em cada elemento que compõe o vetor. O último aspecto importante para se introduzir sobre vetores é a reciclagem. Reciglagem O que você imagina que acontece quando a operação c(1,2)+c(1,1,1,1) é efetuada? O nome da subseção já da uma boa dica. O que acontece é que o vetor de menor comprimento é reciclado, isto é, reutilizado, para que a operação seja efetuada e resultando no seguinte vetor c(2,3,2,3). Importante salientar que isso ocorre quando comprimento do maior vetor é múltiplo do comprimento do vetor menor, caso não seja este caso será retornado um erro. O chunk abaixo explicita essas duas situações &gt; c(1,1)+c(1,2,1,2) # [1] 2 3 2 3 &gt; c(1,1)+c(1,2,1,2,1) # Warning in c(1, 1) + c(1, 2, 1, 2, 1): longer object length is not a # multiple of shorter object length # [1] 2 3 2 3 2 1.3 Matrizes A segunda estutura apresentada é a matriz, que nada mais é do que uma extensão do vetor para uma dimensão a mais. Colocando de outro jeito uma matriz é uma estrutura com colunas com o mesmo número de linhas e que armazenam o mesmo tipo de informação. O leitor provavelmente já se deparou em algum momento da vida com uma matriz do seguinte formato col1 col2 col3 a c e b d f Na estatística existem basicamente dois tipos de variáveis cada uma delas com dois subtipos. A primeira é chamada de variáveis qualitativas, que podem assumir valores nominais, por exemplo Nomes, ou assumir valores ordinais, por exemplo dividir peso pena, peso médio etc. O segundo tipo de variável é chamado de variáveis quantitativas, que podem ser intervalos, por exemplo a previsão do tempo quando nos traz temperatura miníma e máxima, ou assumir valore pontuais, como por exemplo a medição do pesos das pessoas↩ colocar aqui depois a seção na qual isso é discutido↩ Ressaltamos para aqueles que são familiares com outro linguagem de programação, como C, a indexação dos vetores no R começa em 1 e não em 0.↩ colocar aqui no final as seções corretas↩ "]
]
